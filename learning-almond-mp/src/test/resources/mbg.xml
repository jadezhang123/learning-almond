<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--
        指定一个需要在配置中解析使用的外部属性文件，引入属性文件后，
        可以在配置中使用 ${property}这种形式的引用，通过这种方式引用属性文件中的属性值。
        resource: 指定classpath下的属性文件
        url: 指定文件系统上的特定位置, file:///
    -->
    <!--<properties resource=""/>-->

    <!-- 通过这个属性指定驱动的路径 -->
    <classPathEntry location="F:\devRepository\mavenRepository\mysql\mysql-connector-java\5.1.38\mysql-connector-java-5.1.38.jar"/>

    <!--
        指定生成一组对象的环境。例如指定要连接的数据库，要生成对象的类型和要处理的数据库中的表。运行MBG的时候还可以指定要运行的<context>
        id属性必填
        defaultModelType: 定义MBG如何生成实体类
            conditional：
            flat：为每一张表只生成一个实体类，这个实体包含表的所有字段
            hierarchical: 如果表有主键,单独一个的主键实体类,
            如果表还有BLOB字段， 则会为表生成一个包含所有BLOB字段的单独的实体类,
            然后为所有其他的字段生成一个单独的实体类。 MBG自动维护继承关系。

        targetRuntime：指定生成的代码的运行时环境
            MyBatis3：默认值
            MyBatis3Simple：去掉Example相关内容
            Ibatis2Java2
            Ibatis2Java5

        introspectedColumnImpl: 指定扩展org.mybatis.generator.api.IntrospectedColumn该类的实现类(http://mbg.cndocs.ml/reference/extending.html)
    -->
    <context id="db" defaultModelType="flat" targetRuntime="MyBatis3Simple">
        <!-- 当表名或者字段名为SQL关键字的时候, MBG会自动给表名或字段名添加 ` 分隔符 ` -->
        <property name="autoDelimitKeywords" value="true"/>
        <!-- 分隔符 -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>
        <!--<property name="javaFormatter" value=""/>-->
        <!--<property name="xmlFormatter" value=""/>-->
        <!--
            定义一个插件。插件用于扩展或修改通过MBG代码生成器生成的代码，将按在配置中配置的顺序执行
            提供的插件：http://mbg.cndocs.ml/reference/plugins.html
            开发插件： http://mbg.cndocs.ml/reference/pluggingIn.html
        <plugin type=""/>
        -->
        <!--
            注释信息
            type: 指定用户的实现类，该类需要实现org.mybatis.generator.api.CommentGenerator接口。
            而且必有一个默认的构造方法。这个属性接收默认的特殊值DEFAULT，会使用默认的实现类。
        -->
        <commentGenerator type="DEFAULT">
            <!-- 阻止生成注释 -->
            <property name="suppressAllComments" value="true"/>
            <!-- 阻止生成的注释包含时间戳 -->
            <property name="suppressDate" value="true"/>
        </commentGenerator>
        <!-- 指定数据库连接信息 -->
        <jdbcConnection
                driverClass="com.mysql.jdbc.Driver"
                connectionURL="jdbc:mysql://localhost:3306/learning"
                userId="root"
                password="04093x"/>

        <!--
            配置用来指定JDBC类型和Java类型如何转换
            type：提供了默认的实现DEFAULT
        -->
        <javaTypeResolver>
        </javaTypeResolver>
        <!--
            控制生成的实体类
            targetPackage：生成实体类存放的包名
            targetProject：指定目标项目路径
        -->
        <javaModelGenerator targetPackage="own.learning.mbg.modal" targetProject="src/main/java">
            <!-- true: MBG会根据catalog和schema来生成子包 -->
            <property name="enableSubPackages" value="true"/>
            <!-- 设置所有实体类的基类。如果设置，需要使用类的全限定名称, 并且MBG能够加载rootClass -->
            <property name="rootClass" value=""/>
            <property name="trimStrings" value="true" />
        </javaModelGenerator>

        <!--
            控制生成的Mapper XML文件
            targetPackage：生成XML文件存放的包名
            targetProject：指定目标项目路径
        -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator>

        <!--
            控制生成的Mapper接口
            type:该属性用于选择一个预定义的Mapper接口生成器，
            用户可以自定义实现，需要继承org.mybatis.generator.codegen.AbstractJavaClientGenerator类，必选有一个默认的构造方法。
            该属性提供了以下预定的代码生成器，首先根据<context>的targetRuntime分成三类：
                MyBatis3:
                    ANNOTATEDMAPPER:基于注解的Mapper接口，不会有对应的XML映射文件
                    MIXEDMAPPER:XML和注解的混合形式，(上面这种情况中的)SqlProvider注解方法会被XML替代。
                    XMLMAPPER:所有的方法都在XML中，接口调用依赖XML文件。
                MyBatis3Simple:
                    ANNOTATEDMAPPER:基于注解的Mapper接口，不会有对应的XML映射文件
                    XMLMAPPER:所有的方法都在XML中，接口调用依赖XML文件。

            targetPackage:生成实体类存放的包。
            targetProject:指定目标项目路径，。
        -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="own.learning.mbg.dao" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
            <!-- 所有生成的接口都继承的父接口, 可以通过<table>配置的rootInterface属性覆盖 -->
            <property name="rootInterface" value=""/>
        </javaClientGenerator>
        <!--
            配置要通过内省的表。
            tableName: 要生成的表名，可以使用SQL通配符匹配多个表
        -->
        <table tableName="%">
            <generatedKey column="id" sqlStatement="MySql"/>
            <!--
                在生成列之前，对列进行重命名。这对那些存在同一前缀的字段想在生成属性名时去除前缀的表非常有用
                searchString: 搜索正则式
                replaceString：替换值，默认空字符串
            <columnRenamingRule searchString=""/>
            -->
        </table>
    </context>
</generatorConfiguration>
